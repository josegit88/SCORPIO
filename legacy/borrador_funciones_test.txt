def test_download_and_stack(monkeypatch):
    aa = [126.39162693999999, 47.296980665521900, 0.12573827000000001]
    bb = [126.38991429000001, 47.305200665521902, 0.12554201000000001]

    def mock_func_g1g2(pos, ff, *args, **kwargs):
        if pos == (aa[0], aa[1]) and ff == 0:
            mock_g1_g = np.array([
                [-0.01071167,  0.00964355,   0.00968933],
                [ 0.01359558,  0.57812500,  -0.00252151],
                [-0.00158691,  0.03796387,  -0.01063538]])
        return mock_g1_g

        if pos == (aa[0], aa[1]) and ff == 1:
            mock_g1_i = np.array([
                [-0.01382446, -0.07226562, -0.02090454],
                [ 0.00262833,  2.28125000,  0.02066040],
                [-0.03692627,  0.04486084,  0.01148987]])
        return mock_g1_i

        if pos == (bb[0], bb[1]) and ff == 0:
            mock_g2_g = np.array([
                [ 0.01766968,  0.01367188,  0.02185059],
                [ 0.00543976,  0.44775390,  -0.00656128],
                [-0.00865173,  0.00142860,  -0.00644684]])
        return mock_g2_g

        if pos == (bb[0], bb[1]) and ff == 1:
            mock_g1_g = np.array([
                [ 0.09594727, -0.03036499, -0.02136230],
                [ 0.01074219,  2.28515620,  0.10461426],
                [ 0.03338623, -0.02322388,  0.05322266]])
        return mock_g1_g

    monkeypatch.setattr(SkyView, "get_images", mock_func_g1g2)


    expected_g1 = np.array([
        [-2.45361328e-02, -6.26220703e-02, -1.12152100e-02],
        [ 1.62239075e-02,  2.85937500e+00,  1.81388855e-02],
        [-3.85131836e-02,  8.28247070e-02,  8.54492188e-04]])

    expected_g2 = np.array([
        [ 1.13616943e-01, -1.66931152e-02,  4.88281250e-04],
        [ 1.61819458e-02,  2.73291016e+00,  9.80529785e-02],
        [ 2.47344971e-02, -2.17952728e-02,  4.67758179e-02]])


    #stack_g1 = mock_g1_g + mock_g1_i
    #stack_g2 = mock_g2_g + mock_g2_i

    stack_g1, stack_g2 = scorpio.stack_pair(aa, bb, plx=3)

    np.testing.assert_allclose(stack_g1, expected_g1, rtol = 1e-5)
    np.testing.assert_allclose(stack_g2, expected_g2, rtol = 1e-5)
